---
# roles/vpn_client/tasks/upload.yaml
- name: Ensure client_config_dir is defined
  set_fact:
    client_config_dir: "{{ client_configs_base_dir }}/{{ client_name }}"
  when: client_config_dir is not defined
  delegate_to: localhost

- name: Check if archive exists on controller
  delegate_to: localhost
  become: false
  stat:
    path: "{{ client_config_dir }}/{{ client_name }}.tar.gz"
  register: archive_check

- name: Abort if archive missing
  fail:
    msg: "Client archive not found: {{ client_config_dir }}/{{ client_name }}.tar.gz"
  when: not archive_check.stat.exists

- name: Ensure gcloud CLI is available
  delegate_to: localhost
  become: false
  command: which gcloud
  register: gcloud_path_check
  failed_when: gcloud_path_check.rc != 0
  changed_when: false

- name: Upload raw .tar.gz to GCP Secret Manager
  delegate_to: localhost
  become: false
  shell: |
    gcloud secrets create {{ gcp_secrets_prefix }}{{ client_name }} \
      --data-file="{{ client_config_dir }}/{{ client_name }}.tar.gz" \
      --replication-policy="automatic" \
      --project="{{ gcp_project_id }}" || \
    gcloud secrets versions add {{ gcp_secrets_prefix }}{{ client_name }} \
      --data-file="{{ client_config_dir }}/{{ client_name }}.tar.gz" \
      --project="{{ gcp_project_id }}"
  register: gcloud_result
  retries: 3
  delay: 5
  args:
    executable: /bin/bash
  environment:
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_credentials_file }}"

- name: Confirm upload complete
  become: false
  delegate_to: localhost
  debug:
    msg: "Uploaded {{ client_name }} archive to GCP Secret Manager ({{ gcp_secrets_prefix }}{{ client_name }})"

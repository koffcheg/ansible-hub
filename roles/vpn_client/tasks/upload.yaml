---
# roles/vpn_client/tasks/upload.yaml
- name: Ensure client_config_dir is defined
  set_fact:
    client_config_dir: "{{ client_configs_base_dir }}/{{ client_name }}"
  when: client_config_dir is not defined
  delegate_to: localhost

- name: Check if archive exists on controller
  delegate_to: localhost
  become: false
  stat:
    path: "{{ client_config_dir }}/{{ client_name }}.tar.gz"
  register: archive_check

- name: Abort if archive missing
  fail:
    msg: "Client archive not found: {{ client_config_dir }}/{{ client_name }}.tar.gz"
  when: not archive_check.stat.exists

- name: Check that gcloud CLI is available
  delegate_to: localhost
  become: false
  command: which gcloud
  changed_when: false

- name: Activate GCP service account
  import_tasks: "{{ playbook_dir }}/../tasks/activate_gcp_account.yaml"
  delegate_to: localhost
  run_once: true

- name: Verify correct account is active
  delegate_to: localhost
  shell: |
    gcloud auth list --filter=status:ACTIVE --format="value(account)"
  register: active_account
  changed_when: false

- name: Encode archive to base64 before upload
  delegate_to: localhost
  shell: |
    base64 "{{ client_config_dir }}/{{ client_name }}.tar.gz" > "/tmp/{{ client_name }}.b64"
  args:
    executable: /bin/bash

- name: Delete secret if it exists (clean state before upload)
  delegate_to: localhost
  ignore_errors: true
  shell: |
    gcloud secrets delete {{ gcp_secrets_prefix }}{{ client_name }} --quiet --project="{{ gcp_project_id }}"
  args:
    executable: /bin/bash

- name: Create fresh GCP secret
  delegate_to: localhost
  shell: |
    gcloud secrets create {{ gcp_secrets_prefix }}{{ client_name }} \
      --replication-policy="automatic" \
      --data-file="/tmp/{{ client_name }}.b64" \
      --project="{{ gcp_project_id }}"
  args:
    executable: /bin/bash

- name: Confirm upload complete
  become: false
  delegate_to: localhost
  debug:
    msg: "Uploaded {{ client_name }} archive to GCP Secret Manager ({{ gcp_secrets_prefix }}{{ client_name }})"
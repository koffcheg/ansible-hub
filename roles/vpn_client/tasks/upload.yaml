---
# roles/vpn_client/tasks/upload.yaml
- name: Ensure client_config_dir is defined
  set_fact:
    client_config_dir: "{{ client_configs_base_dir }}/{{ client_name }}"
  when: client_config_dir is not defined
  delegate_to: localhost

- name: Check if archive exists on controller
  stat:
    path: "{{ client_config_dir }}/{{ client_name }}.tar.gz"
  delegate_to: localhost
  register: archive_check

- name: Abort if archive missing
  fail:
    msg: "Client archive not found: {{ client_config_dir }}/{{ client_name }}.tar.gz"
  when: not archive_check.stat.exists

- name: Activate GCP service account
  import_tasks: "{{ playbook_dir }}/../tasks/activate_gcp_account.yaml"
  delegate_to: localhost
  run_once: true

- name: Delete secret if it exists (clean state before upload)
  shell: |
    gcloud secrets delete {{ gcp_secrets_prefix }}{{ client_name }} \
      --quiet --project "{{ gcp_project_id }}" || true
  delegate_to: localhost
  ignore_errors: true

- name: Create fresh GCP secret
  shell: |
    gcloud secrets create {{ gcp_secrets_prefix }}{{ client_name }} \
      --replication-policy="automatic" \
      --project="{{ gcp_project_id }}"
  delegate_to: localhost

- name: Upload archive to GCP Secret Manager
  shell: |
    gcloud secrets versions add {{ gcp_secrets_prefix }}{{ client_name }} \
      --data-file="{{ client_config_dir }}/{{ client_name }}.tar.gz" \
      --project="{{ gcp_project_id }}"
  delegate_to: localhost

- name: Confirm upload complete
  debug:
    msg: "Uploaded {{ client_name }} archive to GCP Secret Manager ({{ gcp_secrets_prefix }}{{ client_name }})"
  delegate_to: localhost

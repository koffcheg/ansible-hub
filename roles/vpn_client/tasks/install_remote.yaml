---
# roles/vpn_client/tasks/install_remote.yaml
- name: Ensure gcloud CLI is available on controller
  command: which gcloud
  register: gcloud_check
  failed_when: gcloud_check.rc != 0
  delegate_to: localhost
  run_once: true

- name: Create temp directory on controller
  tempfile:
    state: directory
    suffix: vpnconfig
  register: temp_dir
  delegate_to: localhost
  run_once: true

- name: Download VPN archive from GCP Secret Manager
  shell: |
    gcloud secrets versions access latest \
      --secret="{{ gcp_secrets_prefix }}{{ client_name }}" \
      --project="{{ gcp_project_id }}" | base64 -d > {{ temp_dir.path }}/{{ client_name }}.tar.gz
  delegate_to: localhost
  run_once: true

- name: Copy archive from controller to remote client
  copy:
    src: "{{ temp_dir.path }}/{{ client_name }}.tar.gz"
    dest: "/tmp/{{ client_name }}.tar.gz"
  delegate_to: localhost
  run_once: true

- name: Ensure OpenVPN client directory exists
  file:
    path: "/etc/openvpn/client"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Extract archive to OpenVPN config dir
  unarchive:
    src: "/tmp/{{ client_name }}.tar.gz"
    dest: "/etc/openvpn/client"
    remote_src: yes

- name: Ensure config is in expected place
  copy:
    remote_src: yes
    src: "/etc/openvpn/client/{{ client_name }}.conf"
    dest: "/etc/openvpn/client/{{ client_name }}.conf"

- name: Make dns-hooks.sh executable if present
  file:
    path: "/etc/openvpn/client/dns-hooks.sh"
    mode: '0755'
  when: ansible_facts['distribution'] != "Alpine" and
        ansible_facts['os_family'] != "Darwin" and
        ansible_facts['os_family'] != "Windows"
  ignore_errors: true

- name: Restart OpenVPN client service
  systemd:
    name: "openvpn-client@{{ client_name }}.service"
    enabled: yes
    state: restarted

- name: Clean up VPN archive from /tmp
  file:
    path: "/tmp/{{ client_name }}.tar.gz"
    state: absent
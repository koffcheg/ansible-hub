---
# roles/vpn_client/tasks/install_remote.yaml
- name: Ensure gcloud CLI is available
  command: which gcloud
  register: gcloud_check
  failed_when: gcloud_check.rc != 0
  delegate_to: localhost

- name: Create temp directory for download
  tempfile:
    state: directory
    suffix: vpnconfig
  register: temp_dir
  delegate_to: localhost

- name: Download VPN archive from GCP Secret Manager
  shell: |
    set -e
    gcloud secrets versions access latest \
      --secret="{{ gcp_secrets_prefix }}{{ client_name }}" \
      --project="{{ gcp_project_id }}" | base64 -d > {{ temp_dir.path }}/{{ client_name }}.tar.gz
  delegate_to: localhost

- name: Copy archive to remote client
  copy:
    src: "{{ temp_dir.path }}/{{ client_name }}.tar.gz"
    dest: "/tmp/{{ client_name }}.tar.gz"
  delegate_to: localhost

- name: Ensure target OpenVPN dir exists
  file:
    path: "{{ vpn_client_conf_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Extract archive into OpenVPN dir
  unarchive:
    src: "/tmp/{{ client_name }}.tar.gz"
    dest: "{{ vpn_client_conf_dir }}"
    remote_src: yes

- name: Ensure config is at expected path
  copy:
    remote_src: yes
    src: "{{ vpn_client_conf_dir }}/{{ client_name }}.conf"
    dest: "{{ vpn_client_conf_dir }}/{{ client_name }}.conf"

- name: Make dns-hooks.sh executable (optional)
  file:
    path: "{{ vpn_client_conf_dir }}/dns-hooks.sh"
    mode: '0755'
  when: ansible_facts['distribution'] != "Alpine"

- name: Restart OpenVPN client service
  systemd:
    name: "openvpn-client@{{ client_name }}.service"
    enabled: yes
    state: restarted

- name: Remove local temp dir
  file:
    path: "{{ temp_dir.path }}"
    state: absent
  delegate_to: localhost

- name: Remove remote temp archive
  file:
    path: "/tmp/{{ client_name }}.tar.gz"
    state: absent

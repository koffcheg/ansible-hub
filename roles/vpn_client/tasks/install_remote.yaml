---
# roles/vpn_client/tasks/install_remote.yaml
- name: Ensure gcloud CLI is available on controller
  command: which gcloud
  register: gcloud_check
  failed_when: gcloud_check.rc != 0
  delegate_to: localhost
  run_once: true

- name: Ensure archive dir exists on controller
  file:
    path: "{{ client_archives_dir }}"
    state: directory
    mode: '0755'
  delegate_to: localhost
  run_once: true

- name: Set download path on controller
  set_fact:
    archive_path: "{{ client_archives_dir }}/{{ client_name }}.tar.gz"
  delegate_to: localhost
  run_once: true

- name: Download raw archive from GCP Secret Manager
  shell: |
    gcloud secrets versions access latest \
      --secret="vpn-client-{{ client_name }}" \
      --project="{{ gcp_project_id }}" > "{{ archive_path }}"
  args:
    executable: /bin/bash
  register: gcloud_result
  failed_when: gcloud_result.rc != 0
  delegate_to: localhost
  environment:
    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_credentials_file }}"

- name: Stat downloaded archive
  stat:
    path: "{{ archive_path }}"
  register: archive_check
  delegate_to: localhost
  run_once: true

- name: Fail if archive is empty
  fail:
    msg: "Downloaded archive for {{ client_name }} is empty. Likely corrupt or missing from GCP."
  when: archive_check.stat.size == 0
  delegate_to: localhost
  run_once: true

- name: Copy archive from controller to remote client
  copy:
    src: "{{ archive_path }}"
    dest: "/tmp/{{ client_name }}.tar.gz"
    mode: '0644'

- name: Ensure OpenVPN client directory exists
  file:
    path: "/etc/openvpn/client"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Extract archive to OpenVPN config dir
  unarchive:
    src: "/tmp/{{ client_name }}.tar.gz"
    dest: "/etc/openvpn/client"
    remote_src: yes

- name: Ensure config is in expected place
  copy:
    remote_src: yes
    src: "/etc/openvpn/client/{{ client_name }}.conf"
    dest: "/etc/openvpn/client/{{ client_name }}.conf"

- name: Make dns-hooks.sh executable if present
  file:
    path: "/etc/openvpn/client/dns-hooks.sh"
    mode: '0755'
  when: ansible_facts['distribution'] != "Alpine"
  ignore_errors: true

- name: Restart OpenVPN client service
  systemd:
    name: "openvpn-client@{{ client_name }}.service"
    enabled: yes
    state: restarted

- name: Clean up archive on controller
  file:
    path: "{{ archive_path }}"
    state: absent
  delegate_to: localhost
  run_once: true
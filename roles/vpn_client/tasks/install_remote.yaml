---
# roles/vpn_client/tasks/install_remote.yaml
- name: Ensure archive extraction tools are present
  package:
    name:
      - tar
      - gzip
    state: present
  become: true

- name: Activate GCP service account
  import_tasks: "{{ playbook_dir }}/../tasks/activate_gcp_account.yaml"
  delegate_to: localhost
  run_once: true

- name: Ensure archive dir exists on controller
  file:
    path: "{{ client_archives_dir }}"
    state: directory
    mode: '0755'
  delegate_to: localhost
  run_once: true

- name: Set archive paths on controller
  set_fact:
    archive_b64_path: "{{ client_archives_dir }}/{{ client_name }}.b64"
    archive_path: "{{ client_archives_dir }}/{{ client_name }}.tar.gz"
  delegate_to: localhost
  run_once: true

- name: Download base64-encoded archive from GCP Secret Manager
  shell: |
    gcloud secrets versions access latest \
      --secret="vpn-client-{{ client_name }}" \
      --project="{{ gcp_project_id }}" > "{{ archive_b64_path }}"
  args:
    executable: /bin/bash
  register: gcloud_result
  failed_when: gcloud_result.rc != 0
  delegate_to: localhost

- name: Fail if downloaded base64 file is empty
  stat:
    path: "{{ archive_b64_path }}"
  register: b64_check
  delegate_to: localhost
  run_once: true

- name: Abort if base64 archive is empty
  fail:
    msg: "Downloaded base64 archive for {{ client_name }} is empty."
  when: b64_check.stat.size == 0
  delegate_to: localhost
  run_once: true

- name: Decode base64 archive to .tar.gz
  shell: |
    base64 -d "{{ archive_b64_path }}" > "{{ archive_path }}"
  args:
    executable: /bin/bash
  delegate_to: localhost
  run_once: true

- name: Verify decoded archive is gzip
  shell: file "{{ archive_path }}"
  register: archive_type
  delegate_to: localhost
  run_once: true

- name: Fail if decoded archive is not gzip
  fail:
    msg: "Decoded archive format is invalid: {{ archive_type.stdout }}"
  when: "'gzip compressed data' not in archive_type.stdout"
  delegate_to: localhost
  run_once: true

- name: Copy archive from controller to remote client
  copy:
    src: "{{ archive_path }}"
    dest: "/tmp/{{ client_name }}.tar.gz"
    mode: '0644'

- name: Ensure OpenVPN client directory exists
  file:
    path: "/etc/openvpn/client"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Extract archive to OpenVPN config dir
  unarchive:
    src: "/tmp/{{ client_name }}.tar.gz"
    dest: "/etc/openvpn/client"
    remote_src: yes

- name: Ensure config is in expected place
  copy:
    remote_src: yes
    src: "/etc/openvpn/client/{{ client_name }}.conf"
    dest: "/etc/openvpn/client/{{ client_name }}.conf"

- name: Secure private key file
  file:
    path: "/etc/openvpn/client/{{ client_name }}.key"
    mode: '0600'

- name: Make dns-hooks.sh executable if present
  file:
    path: "/etc/openvpn/client/dns-hooks.sh"
    mode: '0755'
  ignore_errors: true

- name: Restart OpenVPN client service
  systemd:
    name: "openvpn-client@{{ client_name }}.service"
    enabled: yes
    state: restarted

- name: Remove /tmp archive from client
  file:
    path: "/tmp/{{ client_name }}.tar.gz"
    state: absent

- name: Clean up decoded archive on controller
  file:
    path: "{{ archive_path }}"
    state: absent
  delegate_to: localhost
  run_once: true

- name: Clean up base64 archive on controller
  file:
    path: "{{ archive_b64_path }}"
    state: absent
  delegate_to: localhost
  run_once: true

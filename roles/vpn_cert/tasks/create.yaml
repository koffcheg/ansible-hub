---
# roles/vpn_cert/tasks/create.yaml
- name: Ensure required vars are present
  assert:
    that:
      - client_name is defined
      - client_config_dir is defined

- name: Check if certificate already exists
  stat:
    path: "{{ easy_rsa_dir }}/pki/reqs/{{ client_name }}.req"
  register: cert_check

- name: Abort if client cert already exists
  fail:
    msg: "Certificate for {{ client_name }} already exists. Use revoke or rotate first."
  when: cert_check.stat.exists

- name: Generate client certificate
  command: ./easyrsa --batch build-client-full {{ client_name }} nopass
  args:
    chdir: "{{ easy_rsa_dir }}"

- name: Fetch generated certs and keys
  fetch:
    src: "{{ easy_rsa_dir }}/pki/{{ item }}"
    dest: "{{ client_config_dir }}/{{ item | basename }}"
    flat: yes
  loop:
    - "issued/{{ client_name }}.crt"
    - "private/{{ client_name }}.key"
    - "ca.crt"
    - "ta.key"
  delegate_to: localhost

- name: Create OVPN config
  template:
    src: templates/base_client.conf.j2
    dest: "{{ client_config_dir }}/{{ client_name }}.ovpn"
  delegate_to: localhost

- name: Create client bundle archive
  archive:
    path:
      - "{{ client_config_dir }}/ca.crt"
      - "{{ client_config_dir }}/{{ client_name }}.crt"
      - "{{ client_config_dir }}/{{ client_name }}.key"
      - "{{ client_config_dir }}/ta.key"
      - "{{ client_config_dir }}/{{ client_name }}.ovpn"
    dest: "{{ client_config_dir }}/{{ client_name }}.tar.gz"
    format: gz
  delegate_to: localhost

- name: Save metadata locally
  copy:
    dest: "{{ client_config_dir }}/metadata.yaml"
    content: |
      client_name: {{ client_name }}
      created_at: "{{ lookup('pipe', 'date -Iseconds') }}"
      static_ip: {{ static_ip | default('') }}
  delegate_to: localhost